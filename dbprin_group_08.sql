DROP DATABASE IF EXISTS DBPRIN_GROUP_08;
CREATE DATABASE DBPRIN_GROUP_08;
\C DBPRIN_GROUP_08

CREATE TYPE SESSION_TYPES AS ENUM ('Lecture', '1-to-1', 'Practical');
CREATE TYPE TITLE_TYPES AS ENUM ('Mr', 'Mrs', 'Miss', 'Ms', 'Mx', 'Dr', 'Lord', 'Lady');
CREATE TYPE ROOM_TYPES AS ENUM ('Computer Lab', 'Science Lab', 'Classroom', 'Lecture Hall');
DECLARE PHONE_CODE_REGEX TEXT COLLATE '\+[0-9]{1,3}';

-- Todo:
-- ensure phone country codes are similar to PHONE_CODE_REGEX

-- Owen
CREATE TABLE DEPARTMENT (
    DEPT_ID SERIAL PRIMARY KEY,
    DEPT_NAME VARCHAR(50) UNIQUE NOT NULL,
    DESCRIPTION TEXT NOT NULL
);

-- Owen
CREATE TABLE COURSE (
    COURSE_ID SERIAL PRIMARY KEY,
    DEPT_ID INT NOT NULL,
    COURSE_NAME VARCHAR(50) UNIQUE NOT NULL,
    COURSE_DESCRIPTION TEXT NOT NULL,
    COURSE_COST DECIMAL(7, 2) NOT NULL,

    FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID)
);

-- Bradley
CREATE TABLE SUBJECT (
    SUBJECT_ID SERIAL PRIMARY KEY,
    SUBJECT_NAME VARCHAR(50) NOT NULL,
    SUBJECT_LEVEL SMALLINT NOT NULL,
    SUBJECT_DESCRIPTION TEXT NOT NULL,

    CHECK (SUBJECT_LEVEL BETWEEN 4 AND 7),
    UNIQUE(SUBJECT_NAME, SUBJECT_LEVEL)
);

-- Bradley
CREATE TABLE COURSE_SUBJECT (
    COURSE_ID INT NOT NULL,
    SUBJECT_ID INT NOT NULL,

    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID),
    FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECT(SUBJECT_ID),
    
    PRIMARY KEY (COURSE_ID, SUBJECT_ID)
);

-- Steph
CREATE TABLE STAFF (
    STAFF_ID SERIAL PRIMARY KEY,
    DEPT_ID INT NOT NULL,
    BRANCH_ID INT NOT NULL,
    IS_BRANCH_MANAGER BOOLEAN NOT NULL,
    STAFF_EMAIL VARCHAR(50) UNIQUE NOT NULL,
    STAFF_MOBILE_CODE VARCHAR(4) NOT NULL,
    STAFF_MOBILE_NUMBER VARCHAR(15) UNIQUE NOT NULL,
    STAFF_FIRST_NAME VARCHAR(30) NOT NULL,
    STAFF_MIDDLE_NAME VARCHAR(30),
    STAFF_LAST_NAME VARCHAR(30) NOT NULL,
    STAFF_TITLE TITLE_TYPES NOT NULL,
    STAFF_ADDR1 VARCHAR(50) NOT NULL,
    STAFF_ADDR2 VARCHAR(50),
    STAFF_CITY VARCHAR(30) NOT NULL,
    STAFF_POSTCODE VARCHAR(20),
    STAFF_COUNTRY_CODE CHAR(2) NOT NULL,

    FOREIGN KEY (DEPT_ID) REFERENCES DEPARTMENT(DEPT_ID),
    FOREIGN KEY (BRANCH_ID) REFERENCES BRANCH(BRANCH_ID)
);

-- Steph
CREATE TABLE STAFF_ASSIGNMENT (
    STAFF_ASSIGNMENT_ID SERIAL PRIMARY KEY,
    BRANCH_MANAGER_ID INT NOT NULL,
    STAFF_ID INT NOT NULL,
    ASSIGNMENT_TITLE VARCHAR(30) NOT NULL,
    ASSIGNMENT_DESCRIPTION TEXT NOT NULL,
    ASSIGNMENT_DEADLINE TIMESTAMP,
    IS_URGENT BOOLEAN NOT NULL,

    FOREIGN KEY (BRANCH_MANAGER_ID) REFERENCES STAFF(STAFF_ID),
    FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID)
);

-- Bradley
CREATE TABLE COURSE_STAFF (
    COURSE_ID INT NOT NULL,
    STAFF_ID INT NOT NULL,

    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID),
    FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID),
    
    PRIMARY KEY (COURSE_ID, STAFF_ID)
);

-- Steph
CREATE TABLE ROLE (
    ROLE_ID SERIAL PRIMARY KEY,
    ROLE_NAME VARCHAR(50) UNIQUE NOT NULL,
    ROLE_DESCRIPTION TEXT NOT NULL
);

-- Steph
CREATE TABLE STAFF_ROLE (
    COURSE_ID INT NOT NULL,
    STAFF_ID INT NOT NULL,

    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID),
    FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID),

    PRIMARY KEY (COURSE_ID, STAFF_ID)
);

-- Steph
CREATE TABLE STAFF_AVAILABILITY (
    STAFF_ID INT NOT NULL,
    DAY_OF_WEEK SMALLINT NOT NULL,

    FOREIGN KEY STAFF_ID REFERENCES STAFF(STAFF_ID),

    CHECK (DAY_OF_WEEK BETWEEN 1 AND 7),

    PRIMARY KEY (STAFF_ID, DAY_OF_WEEK)
);

-- Bradley
CREATE TABLE STAFF_ABSENCE (
    STAFF_ID INT NOT NULL,
    ABSENCE_START TIMESTAMP NOT NULL,
    ABSENCE_END TIMESTAMP NOT NULL,

    FOREIGN KEY STAFF_ID REFRENCES STAFF(STAFF_ID),

    PRIMARY KEY (STAFF_ID, ABSENCE_START, ABSENCE_END)
);

-- Steph
CREATE TABLE BRANCH (
    BRANCH_ID SERIAL PRIMARY KEY,
    BRANCH_ADDR1 VARCHAR(50) NOT NULL,
    BRANCH_ADDR2 VARCHAR(50),
    BRANCH_CITY VARCHAR(30) NOT NULL,
    BRANCH_POSTCODE VARCHAR(20),
    BRANCH_COUNTRY_CODE CHAR(2) NOT NULL,
    BRANCH_PHONE_COUNTRY_CODE VARCHAR(4),
    BRANCH_PHONE_NUMBER VARCHAR(15) UNIQUE NOT NULL,
    BRANCH_EMAIL VARCHAR(50) UNIQUE NOT NULL
);

-- Steph
-- Changed room_type to ENUM (Bradley)
-- ROOM_NAME length reduced from 50 to 20 (Bradley)
CREATE TABLE ROOM (
    ROOM_ID SERIAL PRIMARY KEY,
    BRANCH_ID INT NOT NULL,
    ROOM_NAME VARCHAR(20) NOT NULL,
    ROOM_TYPE ROOM_TYPES NOT NULL,
    CAPACITY INT NOT NULL,

    FOREIGN KEY (BRANCH_ID) REFERENCES BRANCH(BRANCH_ID),

    CHECK (CAPACITY > 0)
);

-- Steph
CREATE TABLE FACILITY (
    FACILITY_ID SERIAL PRIMARY KEY,
    FACILITY_NAME VARCHAR(50) UNIQUE NOT NULL,
);

-- Steph
CREATE TABLE ROOM_FACILITY (
    ROOM_ID INT NOT NULL,
    FACILITY_ID INT NOT NULL,
    QUANTITY INT NOT NULL,

    FOREIGN KEY (ROOM_ID) REFERENCES ROOM(ROOM_ID),
    FOREIGN KEY (FACILITY_ID) REFERENCES FACILITY(FACILITY_ID),

    CHECK (QUANTITY > 0)

    PRIMARY KEY (ROOM_ID, FACILITY_ID)
);

-- Owen
CREATE TABLE STUDENT(
    STUDENT_ID SERIAL PRIMARY KEY,
    STUDENT_EMAIL VARCHAR(50) UNIQUE NOT NULL,
    STUDENT_FIRST_NAME VARCHAR(30) NOT NULL,
    STUDENT_MIDDLE_NAME VARCHAR(30),
    STUDENT_LAST_NAME VARCHAR(30) NOT NULL,
    STUDENT_TITLE TITLE_TYPES NOT NULL,
    STUDENT_MOBILE_CODE VARCHAR(4) NOT NULL,
    STUDENT_MOBILE VARCHAR(15) UNIQUE NOT NULL,
    STUDENT_ADDR1 VARCHAR(50) NOT NULL,
    STUDENT_ADDR2 VARCHAR(50),
    STUDENT_CITY VARCHAR(30) NOT NULL,
    STUDENT_POSTCODE VARCHAR(20),
    STUDENT_COUNTRY_CODE CHAR(2) NOT NULL,
    STUDENT_DATE_OF_BIRTH DATE NOT NULL
);

-- Owen
CREATE TABLE EMERGENCY_CONTACT (
    STUDENT_ID INT NOT NULL,
    STUDENT_EMERGENCY_ID SERIAL PRIMARY KEY,
    STUDENT_EMERGENCY_CONTACT_FIRST_NAME VARCHAR(30),
    STUDENT_EMERGENCY_CONTACT_LAST_NAME VARCHAR(30),
    STUDENT_EMERGENCY_CONTACT_RELATIONSHIP VARCHAR(20),
    STUDENT_EMERGENCY_PHONE_COUNTRY_CODE VARCHAR(4),
    STUDENT_EMERGENCY_CONTACT_NUMBER VARCHAR(15),
    STUDENT_EMERGENCY_CONTACT_ALT_NUMBER VARCHAR(15),
    STUDENT_EMERGENCY_CONTACT_EMAIL VARCHAR(50),
    STUDENT_EMERGENCY_OTHER_DETAILS TEXT,
    EMERGENCY_SHARES_STUDENT_ADDRESS BOOLEAN
    FOREIGN KEY(student_id) REFERENCES student(student_id)

);

-- Owen
CREATE TABLE HEALTH_CONDITION (
    HEALTH_CONDITION_ID SERIAL PRIMARY KEY,
    HEALTH_CONDITION_NAME VARCHAR(30) NOT NULL,
    HEALTH_CONDITION_NOTES TEXT

);
HEALTH_CONDITION
-- Owen
CREATE TABLE STUDENT_HEALTH_CONDITION (
    STUDENT_ID INT NOT NULL,
    HEALTH_CONDITION INT NOT NULL,
    SEVERITY SMALLINT, --Is there a way to filter this so its only from 1-5? --
    STUDENT_HEALTH_NOTES TEXT

    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID)
    FOREIGN KEY (HEALTH_CONDITION_ID) REFERENCES HEALTH_CONDITION(HEALTH_CONDITION_ID)
);

-- Bradley
CREATE TABLE EVALUATION_SESSION (
    TUTOR_ID INT NOT NULL,
    STUDENT_ID INT NOT NULL,
    SESSION_DATETIME TIMESTAMP NOT NULL,
    ROOM_ID INT,
    SESSION_NOTES TEXT,
    IS_ONLINE BOOLEAN NOT NULL,

    FOREIGN KEY TUTOR_ID REFERENCES STAFF(STAFF_ID),
    FOREIGN KEY STUDENT_ID REFERENCES STUDENT(STUDENT_ID),
    FOREIGN KEY ROOM_ID REFERENCES ROOM(ROOM_ID),

    PRIMARY KEY (TUTOR_ID, STUDENT_ID, SESSION_DATETIME)
);

-- Bradley
CREATE TABLE ASSIGNMENT (
    ASSIGNMENT_ID SERIAL PRIMARY KEY,
    STAFF_ID INT NOT NULL,
    SUBJECT_ID INT NOT NULL,
    SET_DATE TIMESTAMP NOT NULL,
    DUE_DATE TIMESTAMP,
    ASSIGNMENT_DESCRIPTION TEXT,

    FOREIGN KEY STAFF_ID REFERENCES STAFF(STAFF_ID),
    FOREIGN KEY SUBJECT_ID REFERENCES SUBJECT(SUBJECT_ID)
);

-- Bradley
CREATE TABLE STUDENT_ASSIGNMENT (
    STUDENT_ID INT NOT NULL,
    ASSIGNMENT_ID INT NOT NULL,
    SUBMISSION_DATETIME TIMESTAMP NOT NULL,
    IS_ASSIGNMENT_ASSESSED BOOLEAN NOT NULL,
    ASSIGNMENT_PERCENTAGE DECIMAL(3, 2),
    ASSIGNMENT_WEIGHT DECIMAL(3, 2),

    FOREIGN KEY STUDENT_ID REFERENCES STUDENT(STUDENT_ID),
    FOREIGN KEY ASSIGNMENT_ID REFERENCES ASSIGNMENT(ASSIGNMENT_ID),

    PRIMARY KEY (STUDENT_ID, ASSIGNMENT_ID, SUBMISSION_DATETIME)
);

-- Bradley
CREATE TABLE SESSION (
    SESSION_ID SERIAL PRIMARY KEY,
    SUBJECT_ID INT NOT NULL,
    ROOM_ID INT,
    SESSION_TYPE SESSION_TYPES NOT NULL,
    SESSION_STATUS VARCHAR(15) NOT NULL,
    SESSION_NAME VARCHAR(100) NOT NULL,
    SESSION_START TIMESTAMP NOT NULL,
    SESSION_END TIMESTAMP NOT NULL,
    IS_ONLINE BOOLEAN NOT NULL,

    FOREIGN KEY SUBJECT_ID REFERENCES SUBJECT(SUBJECT_ID),
    FOREIGN KEY ROOM_ID REFERENCES ROOM(ROOM_ID)
);

-- Bradley
CREATE TABLE SESSION_STUDENT (
    SESSION_ID INT NOT NULL,
    STUDENT_ID INT NOT NULL,
    ATTENDANCE_STATUS VARCHAR(15)
    FEEDBACK_GENERAL_RATING SMALLINT,
    FEEDBACK_ONLINE_CONNECTION_QUALITY SMALLINT,
    FEEDBACK_CONCEPT_UNDERSTOOD_RATING SMALLINT,
    FEEDBACK_EXTRA_NOTES TEXT,

    FOREIGN KEY SESSION_ID REFERENCES SESSION(SESSION_ID),
    FOREIGN KEY STUDENT_ID REFERENCES STUDENT(STUDENT_ID),

    CHECK (FEEDBACK_GENERAL_RATING BETWEEN 0 AND 10),
    CHECK (FEEDBACK_ONLINE_CONNECTION_QUALITY BETWEEN 0 AND 10),
    CHECK (FEEDBACK_CONCEPT_UNDERSTOOD_RATING BETWEEN 0 AND 10)
);

-- Bradley
CREATE TABLE SESSION_STAFF (
    SESSION_ID INT NOT NULL,
    STAFF_ID INT NOT NULL,

    FOREIGN KEY (SESSION_ID) REFERENCES SESSION(SESSION_ID),
    FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID),
    
    PRIMARY KEY (SESSION_ID, STAFF_ID)
);

-- Owen
CREATE TABLE ENROLMENT (
    ENROLMENT_ID SERIAL PRIMARY KEY,
    COURSE_ID INT NOT NULL,
    STUDENT_ID INT NOT NULL,
    ENROLMENT_STATUS VARCHAR(15),
    ENROLMENT_START_DATE DATE,
    ENROLMENT_END_DATE DATE,
    FINAL_GRADE_PERCENTAGE DECIMAL(3,2)

    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID)
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID)

);

-- Owen
CREATE TABLE STUDENT_PAYMENT (
    PAYMENT_ID SERIAL PRIMARY KEY,
    ENROLMENT_ID INT NOT NULL,
    PAYMENT_STATUS VARCHAR(15),
    PAYMENT_AMOUNT DECIMAL(7,2),
    PAYMENT_DATETIME TIMESTAMP

    FOREIGN KEY (ENROLMENT_ID) REFERENCES ENROLMENT(ENROLMENT_ID)

);